import streamlit as st
import requests
from io import BytesIO
from openai import OpenAI
import tempfile
import os

# Configuration de la page
st.set_page_config(
    page_title="Traitement Audio OpenAI",
    page_icon="üéµ",
    layout="wide"
)

# Titre de la page
st.title("üéµ Traitement Audio avec OpenAI")
st.markdown("---")

# Configuration de l'API OpenAI avec saisie utilisateur
def initialize_openai_client(api_key):
    """Initialise le client OpenAI avec la cl√© API fournie par l'utilisateur"""
    try:
        if not api_key:
            return None
        
        if not api_key.startswith('sk-'):
            st.error("‚ùå Format de cl√© API invalide. La cl√© doit commencer par 'sk-'")
            return None
        
        # Initialisation du client OpenAI
        client = OpenAI(api_key=api_key)
        
        # Test de validation de la cl√© API
        try:
            # Test simple pour v√©rifier si la cl√© fonctionne
            test_response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": "test"}],
                max_tokens=1
            )
            return client
        except Exception as e:
            st.error(f"‚ùå Cl√© API invalide ou probl√®me de connexion: {str(e)}")
            return None
            
    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'initialisation du client OpenAI: {str(e)}")
        return None

def openai_transcribe(client, audio_file):
    """
    Transcrit un fichier audio en texte
    
    Args:
        client: Client OpenAI initialis√©
        audio_file: Fichier audio √† transcrire
    
    Returns:
        str: Transcription du fichier audio
    """
    try:
        # Cr√©er un fichier temporaire pour l'audio
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp_file:
            tmp_file.write(audio_file.read())
            tmp_file_path = tmp_file.name
        
        # Ouvrir le fichier pour la transcription
        with open(tmp_file_path, "rb") as audio:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio
            )
        
        # Nettoyer le fichier temporaire
        os.unlink(tmp_file_path)
        
        return transcript.text
        
    except Exception as e:
        # Nettoyer le fichier temporaire en cas d'erreur
        if 'tmp_file_path' in locals():
            try:
                os.unlink(tmp_file_path)
            except:
                pass
        st.error(f"‚ùå Erreur lors de la transcription: {str(e)}")
        return None

def openai_translate(client, audio_file, target_language="fran√ßais"):
    """
    Traduit un fichier audio en texte dans une langue cible
    
    Args:
        client: Client OpenAI initialis√©
        audio_file: Fichier audio √† traduire
        target_language: Langue cible pour la traduction
    
    Returns:
        str: Traduction du fichier audio
    """
    try:
        # Cr√©er un fichier temporaire pour l'audio
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp_file:
            tmp_file.write(audio_file.read())
            tmp_file_path = tmp_file.name
        
        # Ouvrir le fichier pour la traduction
        with open(tmp_file_path, "rb") as audio:
            translation = client.audio.translations.create(
                model="whisper-1",
                file=audio
            )
        
        # Nettoyer le fichier temporaire
        os.unlink(tmp_file_path)
        
        # Si on veut une autre langue que l'anglais, utiliser GPT pour traduire
        if target_language.lower() != "english" and target_language.lower() != "anglais":
            chat_response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": f"Tu es un traducteur expert. Traduis le texte suivant en {target_language}."},
                    {"role": "user", "content": translation.text}
                ],
                max_tokens=1000
            )
            return chat_response.choices[0].message.content
        
        return translation.text
        
    except Exception as e:
        # Nettoyer le fichier temporaire en cas d'erreur
        if 'tmp_file_path' in locals():
            try:
                os.unlink(tmp_file_path)
            except:
                pass
        st.error(f"‚ùå Erreur lors de la traduction: {str(e)}")
        return None

def text_to_speech(client, text, voice="alloy", model="tts-1"):
    """
    Convertit un texte en fichier audio
    
    Args:
        client: Client OpenAI initialis√©
        text: Texte √† convertir en audio
        voice: Voix √† utiliser (alloy, echo, fable, onyx, nova, shimmer)
        model: Mod√®le TTS √† utiliser (tts-1 ou tts-1-hd)
    
    Returns:
        bytes: Donn√©es audio g√©n√©r√©es
    """
    try:
        response = client.audio.speech.create(
            model=model,
            voice=voice,
            input=text
        )
        
        return response.content
        
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la g√©n√©ration audio: {str(e)}")
        return None

# Section de saisie de la cl√© API
st.subheader("üîë Configuration de l'API OpenAI")

col1, col2 = st.columns([3, 1])

with col1:
    api_key = st.text_input(
        "Entrez votre cl√© API OpenAI:",
        type="password",
        placeholder="sk-proj-...",
        help="Votre cl√© API OpenAI. Elle commence par 'sk-proj-' ou 'sk-'."
    )

with col2:
    st.markdown("### üí° Comment obtenir une cl√© API ?")
    st.markdown("""
    1. Allez sur [platform.openai.com](https://platform.openai.com)
    2. Connectez-vous √† votre compte
    3. Allez dans "API Keys"
    4. Cr√©ez une nouvelle cl√©
    5. Copiez-la ici
    """)

# Initialisation du client OpenAI
client = None
if api_key:
    with st.spinner("üîç Validation de la cl√© API..."):
        client = initialize_openai_client(api_key)
    
    if client:
        st.success("‚úÖ Cl√© API valid√©e avec succ√®s !")
    else:
        st.warning("‚ö†Ô∏è Cl√© API non valid√©e. Veuillez v√©rifier votre cl√©.")

# Interface utilisateur (seulement si la cl√© API est valide)
if client:
    st.markdown("---")
    
    # Onglets pour diff√©rentes fonctionnalit√©s
    tab1, tab2, tab3, tab4 = st.tabs(["üé§ Transcription", "üåç Traduction Audio", "üîä Text-to-Speech", "‚ÑπÔ∏è Informations"])

    with tab1:
        st.header("üé§ Transcription Audio")
        st.markdown("Convertissez vos fichiers audio en texte avec Whisper d'OpenAI")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üì§ Upload Audio")
            
            # Upload de fichier audio
            audio_file = st.file_uploader(
                "Choisissez un fichier audio √† transcrire",
                type=['mp3', 'wav', 'm4a', 'ogg', 'flac'],
                help="Formats support√©s: MP3, WAV, M4A, OGG, FLAC"
            )
            
            if audio_file:
                st.audio(audio_file, format='audio/mp3')
                st.info(f"Fichier: {audio_file.name} ({audio_file.size} bytes)")
        
        with col2:
            st.subheader("üìù Transcription")
            
            if audio_file:
                if st.button("üöÄ Transcrire", key="transcribe", type="primary"):
                    audio_file.seek(0)  # Reset file pointer
                    with st.spinner("üîÑ Transcription en cours..."):
                        transcription = openai_transcribe(client, audio_file)
                    
                    if transcription:
                        st.success("‚úÖ Transcription termin√©e !")
                        st.markdown("### üìã R√©sultat")
                        st.text_area("Transcription:", value=transcription, height=200, disabled=True)
                        
                        # Bouton de t√©l√©chargement
                        st.download_button(
                            label="üì• T√©l√©charger la transcription",
                            data=transcription,
                            file_name="transcription.txt",
                            mime="text/plain"
                        )
            else:
                st.info("üëÜ Veuillez d'abord uploader un fichier audio")

    with tab2:
        st.header("üåç Traduction Audio")
        st.markdown("Traduisez vos fichiers audio dans diff√©rentes langues")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üì§ Upload Audio")
            
            # Upload de fichier audio pour traduction
            audio_file_translate = st.file_uploader(
                "Choisissez un fichier audio √† traduire",
                type=['mp3', 'wav', 'm4a', 'ogg', 'flac'],
                help="Formats support√©s: MP3, WAV, M4A, OGG, FLAC",
                key="translate_uploader"
            )
            
            if audio_file_translate:
                st.audio(audio_file_translate, format='audio/mp3')
                st.info(f"Fichier: {audio_file_translate.name} ({audio_file_translate.size} bytes)")
        
        with col2:
            st.subheader("üîÑ Traduction")
            
            if audio_file_translate:
                # Choix de la langue cible
                target_lang = st.selectbox(
                    "Langue cible:",
                    ["fran√ßais", "english", "espa√±ol", "deutsch", "italiano", "portugu√™s", "—Ä—É—Å—Å–∫–∏–π", "‰∏≠Êñá", "Êó•Êú¨Ë™û"],
                    help="Choisissez la langue de traduction"
                )
                
                if st.button("üöÄ Traduire", key="translate", type="primary"):
                    audio_file_translate.seek(0)  # Reset file pointer
                    with st.spinner("üîÑ Traduction en cours..."):
                        translation = openai_translate(client, audio_file_translate, target_lang)
                    
                    if translation:
                        st.success("‚úÖ Traduction termin√©e !")
                        st.markdown("### üìã R√©sultat")
                        st.text_area("Traduction:", value=translation, height=200, disabled=True)
                        
                        # Bouton de t√©l√©chargement
                        st.download_button(
                            label="üì• T√©l√©charger la traduction",
                            data=translation,
                            file_name=f"traduction_{target_lang}.txt",
                            mime="text/plain"
                        )
            else:
                st.info("üëÜ Veuillez d'abord uploader un fichier audio")

    with tab3:
        st.header("üîä Text-to-Speech")
        st.markdown("Convertissez votre texte en audio avec les voix d'OpenAI")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìù Texte √† convertir")
            
            # Zone de texte
            text_input = st.text_area(
                "Entrez le texte √† convertir en audio:",
                placeholder="Tapez ou collez votre texte ici...",
                height=200
            )
            
            # Param√®tres de g√©n√©ration
            st.subheader("‚öôÔ∏è Param√®tres")
            
            voice = st.selectbox(
                "Voix:",
                ["alloy", "echo", "fable", "onyx", "nova", "shimmer"],
                help="Choisissez la voix pour la g√©n√©ration audio"
            )
            
            model = st.selectbox(
                "Qualit√©:",
                ["tts-1", "tts-1-hd"],
                format_func=lambda x: "Standard (tts-1)" if x == "tts-1" else "Haute qualit√© (tts-1-hd)"
            )
        
        with col2:
            st.subheader("üéµ G√©n√©ration Audio")
            
            if text_input.strip():
                if st.button("üöÄ G√©n√©rer l'audio", key="tts", type="primary"):
                    with st.spinner("üîÑ G√©n√©ration audio en cours..."):
                        audio_data = text_to_speech(client, text_input, voice, model)
                    
                    if audio_data:
                        st.success("‚úÖ Audio g√©n√©r√© !")
                        
                        # Lecture audio
                        st.audio(audio_data, format='audio/mp3')
                        
                        # Bouton de t√©l√©chargement
                        st.download_button(
                            label="üì• T√©l√©charger l'audio",
                            data=audio_data,
                            file_name=f"audio_{voice}.mp3",
                            mime="audio/mp3"
                        )
                        
                        # Informations
                        st.info(f"üéµ Voix utilis√©e: {voice} | Mod√®le: {model}")
            else:
                st.info("üëÜ Veuillez d'abord entrer un texte")

    with tab4:
        st.header("‚ÑπÔ∏è Informations sur le Traitement Audio")
        
        st.markdown("""
        ### ü§ñ Technologies utilis√©es
        
        **üé§ Whisper (Transcription & Traduction)**
        - Mod√®le de reconnaissance vocale d'OpenAI
        - Support de 99+ langues
        - Haute pr√©cision de transcription
        
        **üîä Text-to-Speech (TTS)**
        - G√©n√©ration audio haute qualit√©
        - 6 voix diff√©rentes disponibles
        - 2 niveaux de qualit√©
        
        ### üìã Formats audio support√©s
        
        **üì§ Upload (Transcription/Traduction)**
        - MP3, WAV, M4A, OGG, FLAC
        - Taille maximale recommand√©e: 25MB
        
        **üì• G√©n√©ration (TTS)**
        - Format de sortie: MP3
        - Qualit√© configurable
        
        ### üéµ Voix disponibles (TTS)
        
        - **alloy** - Voix √©quilibr√©e et naturelle
        - **echo** - Voix masculine claire
        - **fable** - Voix expressive
        - **onyx** - Voix masculine profonde
        - **nova** - Voix f√©minine jeune
        - **shimmer** - Voix f√©minine douce
        
        ### üåç Langues support√©es
        
        **Transcription & Traduction:**
        - Plus de 99 langues
        - D√©tection automatique de la langue source
        - Traduction vers le fran√ßais, anglais, espagnol, etc.
        
        ### üí° Conseils d'utilisation
        
        **üì§ Pour de meilleurs r√©sultats:**
        - Utilisez des fichiers audio de bonne qualit√©
        - √âvitez les bruits de fond excessifs
        - Parlez clairement et distinctement
        
        **üîä Pour Text-to-Speech:**
        - Limitez le texte √† 4096 caract√®res max
        - Utilisez une ponctuation appropri√©e
        - Testez diff√©rentes voix pour trouver celle qui convient
        """)

else:
    # Message d'information si pas de cl√© API
    st.info("üîë Veuillez entrer une cl√© API OpenAI valide pour utiliser le traitement audio.")
    
    st.markdown("### üìã Instructions d'utilisation")
    st.markdown("""
    1. **Obtenez une cl√© API** sur [platform.openai.com](https://platform.openai.com/api-keys)
    2. **Entrez votre cl√©** dans le champ ci-dessus
    3. **Attendez la validation** (v√©rification automatique)
    4. **Choisissez une fonctionnalit√©** dans les onglets
    5. **Uploadez un fichier audio** ou entrez du texte selon la fonctionnalit√©
    
    ‚ö†Ô∏è **Note de s√©curit√©:** Votre cl√© API n'est pas stock√©e et reste priv√©e √† votre session.
    """)

# Sidebar avec informations
with st.sidebar:
    st.markdown("### üéµ Audio AI")
    st.markdown("""
    **Fonctionnalit√©s:**
    - üé§ Transcription audio
    - üåç Traduction multilingue
    - üîä Text-to-Speech
    - üì• T√©l√©chargement des r√©sultats
    """)
    
    st.markdown("### ‚ö° Avantages")
    st.markdown("""
    - Pr√©cision √©lev√©e
    - 99+ langues support√©es
    - 6 voix TTS diff√©rentes
    - Interface intuitive
    - Traitement rapide
    """)
    
    # Statut de la connexion API
    st.markdown("### üîå Statut de l'API")
    if client:
        st.success("Connect√© ‚úÖ")
    else:
        st.error("Non connect√© ‚ùå")

# Style CSS personnalis√©
st.markdown("""
<style>
    .stTextInput > div > div > input[type="password"] {
        font-family: monospace;
    }
    
    .audio-info {
        background-color: #f0f2f6;
        padding: 10px;
        border-radius: 5px;
        border-left: 4px solid #4CAF50;
    }
</style>
""", unsafe_allow_html=True)
