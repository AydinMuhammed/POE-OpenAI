import streamlit as st
import openai
import requests
from io import BytesIO
import base64
from PIL import Image

# Configuration de la page
st.set_page_config(
    page_title="Projet Final - G√©n√©rateur d'Histoires Visuelles",
    page_icon="üé®",
    layout="wide"
)

st.title("üé® G√©n√©rateur d'Histoires Visuelles")
st.markdown("---")

# Fonctions utilitaires
def initialize_openai_client(api_key):
    """Initialise le client OpenAI avec la cl√© API fournie par l'utilisateur"""
    try:
        if not api_key:
            return None
        
        if not api_key.startswith('sk-'):
            st.error("‚ùå Format de cl√© API invalide. La cl√© doit commencer par 'sk-'")
            return None
        
        # Initialisation du client OpenAI
        client = openai.OpenAI(api_key=api_key)
        
        # Test de validation de la cl√© API
        try:
            test_response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": "test"}],
                max_tokens=1
            )
            return client
        except Exception as e:
            st.error(f"‚ùå Cl√© API invalide ou probl√®me de connexion: {str(e)}")
            return None
            
    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'initialisation du client OpenAI: {str(e)}")
        return None

def improve_story_prompt(client, user_prompt, creativity_level=0.8):
    """Am√©liore et compl√®te un prompt d'histoire avec ChatGPT"""
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": """Tu es un expert en cr√©ation d'histoires et en g√©n√©ration d'images. 
                 Ta mission est d'am√©liorer et de compl√©ter un prompt d'histoire fourni par l'utilisateur.
                 Tu dois:
                 1. Enrichir l'histoire avec des d√©tails visuels
                 2. Ajouter des √©l√©ments narratifs captivants
                 3. Cr√©er une description qui sera parfaite pour g√©n√©rer une image
                 4. Garder l'essence de l'id√©e originale
                 5. R√©pondre en fran√ßais
                 6. IMPORTANT: √âviter tout contenu violent, politique, sexuel ou inappropri√©
                 7. Privil√©gier des th√®mes positifs, cr√©atifs et familiaux
                 
                 Ton am√©lioration doit √™tre cr√©ative, d√©taill√©e, visuellement riche et adapt√©e √† DALL-E."""},
                {"role": "user", "content": f"Am√©liore et compl√®te cette id√©e d'histoire en √©vitant tout contenu inappropri√©: {user_prompt}"}
            ],
            max_tokens=500,
            temperature=creativity_level
        )
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'am√©lioration du prompt: {str(e)}")
        return None

def generate_image_with_dalle(client, prompt, size="1024x1024", quality="standard"):
    """G√©n√®re une image avec DALL-E bas√©e sur le prompt"""
    try:
        # Nettoyer et optimiser le prompt pour DALL-E
        cleaned_prompt = clean_prompt_for_dalle(prompt)
        
        response = client.images.generate(
            model="dall-e-3",
            prompt=cleaned_prompt,
            size=size,
            quality=quality,
            n=1
        )
        
        # R√©cup√©rer l'URL de l'image
        image_url = response.data[0].url
        
        # T√©l√©charger l'image
        image_response = requests.get(image_url)
        image_data = BytesIO(image_response.content)
        
        return image_data, image_url
        
    except Exception as e:
        error_message = str(e)
        if "image_generation_user_error" in error_message:
            st.error("‚ùå Le contenu de votre histoire ne peut pas √™tre illustr√© par DALL-E.")
            st.error("üí° Essayez de modifier votre histoire pour √©viter les contenus sensibles, violents ou inappropri√©s.")
            st.info("üîÑ Vous pouvez personnaliser le prompt dans la section 'Personnaliser le prompt pour l'image'")
        else:
            st.error(f"‚ùå Erreur lors de la g√©n√©ration d'image: {str(e)}")
        return None, None

def clean_prompt_for_dalle(prompt):
    """Nettoie et optimise le prompt pour DALL-E"""
    # Supprimer les mots ou phrases potentiellement probl√©matiques
    problematic_words = [
        "violent", "violence", "sang", "mort", "tuer", "guerre", "arme",
        "politique", "religion", "sexuel", "nu", "nudit√©", "drogue",
        "alcool", "cigarette", "tabac", "haine", "discrimination"
    ]
    
    cleaned_prompt = prompt.lower()
    
    # Remplacer les mots probl√©matiques par des alternatives
    replacements = {
        "violent": "√©nergique",
        "violence": "action",
        "sang": "rouge",
        "mort": "endormi",
        "tuer": "vaincre",
        "guerre": "conflit",
        "arme": "outil",
        "politique": "gouvernement",
        "religion": "spiritualit√©",
        "drogue": "potion",
        "alcool": "boisson",
        "cigarette": "b√¢ton",
        "tabac": "herbe"
    }
    
    for word, replacement in replacements.items():
        cleaned_prompt = cleaned_prompt.replace(word, replacement)
    
    # Limiter la longueur du prompt (DALL-E a une limite)
    if len(cleaned_prompt) > 1000:
        cleaned_prompt = cleaned_prompt[:1000] + "..."
    
    # Ajouter des termes positifs pour am√©liorer la g√©n√©ration
    positive_terms = "artistic, beautiful, detailed, high quality, masterpiece"
    cleaned_prompt = f"{cleaned_prompt}, {positive_terms}"
    
    return cleaned_prompt

def describe_image(client, image_data):
    """G√©n√®re une description de l'image avec GPT-4 Vision"""
    try:
        # Convertir l'image en base64
        image_data.seek(0)
        image_base64 = base64.b64encode(image_data.read()).decode()
        
        response = client.chat.completions.create(
            model="gpt-4o",  # Mod√®le mis √† jour pour Vision
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": "D√©cris cette image en d√©tail. Raconte ce que tu vois, l'atmosph√®re, les couleurs, les personnages, l'action qui se d√©roule. Sois cr√©atif et narratif dans ta description."
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/png;base64,{image_base64}",
                                "detail": "high"
                            }
                        }
                    ]
                }
            ],
            max_tokens=500
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la description d'image: {str(e)}")
        st.error(f"D√©tails de l'erreur: {type(e).__name__}")
        return None

# Section de saisie de la cl√© API
st.subheader("üîë Configuration de l'API OpenAI")

col1, col2 = st.columns([3, 1])

with col1:
    api_key = st.text_input(
        "Entrez votre cl√© API OpenAI:",
        type="password",
        placeholder="sk-...",
        help="Votre cl√© API OpenAI. Elle commence par 'sk-'."
    )

with col2:
    st.markdown("### üí° Comment obtenir une cl√© API ?")
    st.markdown("""
    1. Allez sur [platform.openai.com](https://platform.openai.com)
    2. Connectez-vous √† votre compte
    3. Allez dans "API Keys"
    4. Cr√©ez une nouvelle cl√©
    5. Copiez-la ici
    """)

# Initialisation du client OpenAI
client = None
if api_key:
    with st.spinner("üîç Validation de la cl√© API..."):
        client = initialize_openai_client(api_key)
    
    if client:
        st.success("‚úÖ Cl√© API valid√©e avec succ√®s !")
    else:
        st.warning("‚ö†Ô∏è Cl√© API non valid√©e. Veuillez v√©rifier votre cl√©.")

# Interface utilisateur principale
if client:
    st.markdown("---")
    
    # Onglets pour organiser le workflow
    tab1, tab2, tab3, tab4 = st.tabs(["üìù Cr√©ation d'Histoire", "üé® G√©n√©ration d'Image", "üñºÔ∏è Galerie", "‚ÑπÔ∏è √Ä propos"])
    
    with tab1:
        st.header("üìù Cr√©ation et Am√©lioration d'Histoire")
        st.markdown("Commencez par entrer votre id√©e d'histoire, l'IA l'am√©liorera pour vous !")
        
        # Zone de saisie du prompt utilisateur
        user_prompt = st.text_area(
            "Entrez votre id√©e d'histoire:",
            placeholder="Ex: Un chat magique qui explore une for√™t enchant√©e...",
            height=100,
            help="D√©crivez votre id√©e d'histoire, m√™me bri√®vement. L'IA va l'enrichir !"
        )
        
        # Param√®tres pour l'am√©lioration
        with st.expander("‚öôÔ∏è Param√®tres d'am√©lioration"):
            creativity_level = st.slider(
                "Niveau de cr√©ativit√©",
                min_value=0.1,
                max_value=1.0,
                value=0.8,
                step=0.1,
                help="Plus √©lev√© = plus cr√©atif mais moins pr√©visible"
            )
        
        if st.button("üöÄ Am√©liorer mon histoire", type="primary", disabled=not user_prompt):
            if user_prompt:
                with st.spinner("üîÑ Am√©lioration de votre histoire en cours..."):
                    improved_prompt = improve_story_prompt(client, user_prompt, creativity_level)
                
                if improved_prompt:
                    st.success("‚úÖ Histoire am√©lior√©e avec succ√®s !")
                    
                    # Afficher l'am√©lioration
                    st.markdown("### üìñ Votre histoire am√©lior√©e")
                    st.markdown(f"**Histoire originale:** {user_prompt}")
                    st.markdown("---")
                    st.markdown(f"**Histoire am√©lior√©e:** {improved_prompt}")
                    
                    # Stocker dans la session
                    st.session_state.improved_story = improved_prompt
                    st.session_state.original_story = user_prompt
                    
                    st.info("üëâ Passez √† l'onglet 'G√©n√©ration d'Image' pour cr√©er une image de votre histoire !")
    
    with tab2:
        st.header("üé® G√©n√©ration d'Image avec DALL-E")
        st.markdown("Cr√©ez une image bas√©e sur votre histoire am√©lior√©e")
        
        # V√©rifier si une histoire am√©lior√©e existe
        if "improved_story" in st.session_state:
            st.markdown("### üìñ Histoire √† illustrer")
            st.info(st.session_state.improved_story)
            
            # Param√®tres de g√©n√©ration d'image
            col1, col2 = st.columns(2)
            
            with col1:
                image_size = st.selectbox(
                    "Taille de l'image",
                    ["1024x1024", "1792x1024", "1024x1792"],
                    help="Format carr√© ou rectangulaire"
                )
            
            with col2:
                image_quality = st.selectbox(
                    "Qualit√© de l'image",
                    ["standard", "hd"],
                    help="HD co√ªte plus cher mais offre plus de d√©tails"
                )
            
            # Option pour modifier le prompt avant g√©n√©ration
            with st.expander("üé® Personnaliser le prompt pour l'image"):
                st.markdown("üí° **Conseil:** √âvitez les contenus violents, politiques ou inappropri√©s pour DALL-E")
                custom_prompt = st.text_area(
                    "Modifiez le prompt si n√©cessaire:",
                    value=st.session_state.improved_story,
                    height=150,
                    help="Vous pouvez ajuster le prompt pour l'image. √âvitez les contenus sensibles."
                )
                
                # Afficher un aper√ßu du prompt nettoy√©
                if custom_prompt:
                    cleaned_preview = clean_prompt_for_dalle(custom_prompt)
                    if cleaned_preview != custom_prompt.lower() + ", artistic, beautiful, detailed, high quality, masterpiece":
                        st.info("üîÑ Aper√ßu du prompt optimis√© pour DALL-E:")
                        st.code(cleaned_preview[:200] + "..." if len(cleaned_preview) > 200 else cleaned_preview)
            
            if "custom_prompt" not in locals():
                custom_prompt = st.session_state.improved_story
            
            # Bouton de g√©n√©ration
            if st.button("üé® G√©n√©rer l'image", type="primary"):
                with st.spinner("üé® G√©n√©ration de l'image en cours... (cela peut prendre 30-60 secondes)"):
                    image_data, image_url = generate_image_with_dalle(
                        client, 
                        custom_prompt, 
                        size=image_size, 
                        quality=image_quality
                    )
                
                if image_data and image_url:
                    st.success("‚úÖ Image g√©n√©r√©e avec succ√®s !")
                    
                    # Afficher l'image
                    image = Image.open(image_data)
                    st.image(image, caption="Votre histoire visualis√©e", use_column_width=True)
                    
                    # Stocker dans la session
                    st.session_state.generated_image = image_data
                    st.session_state.image_url = image_url
                    st.session_state.image_prompt = custom_prompt
                    
                    # Boutons d'action
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # T√©l√©chargement
                        image_data.seek(0)
                        st.download_button(
                            label="üì• T√©l√©charger l'image",
                            data=image_data.getvalue(),
                            file_name="histoire_visualisee.png",
                            mime="image/png"
                        )
                    
                    with col2:
                        # Bouton pour g√©n√©rer une description
                        if st.button("üîç D√©crire l'image"):
                            # Copier image_data pour √©viter les probl√®mes de position
                            image_data_copy = BytesIO()
                            image_data.seek(0)
                            image_data_copy.write(image_data.read())
                            image_data_copy.seek(0)
                            
                            with st.spinner("üîÑ G√©n√©ration de la description..."):
                                description = describe_image(client, image_data_copy)
                            
                            if description:
                                st.session_state.image_description = description
                                st.rerun()
                            else:
                                st.error("‚ùå Impossible de g√©n√©rer la description. V√©rifiez votre cl√© API et r√©essayez.")
                    
                    # Afficher la description si elle existe
                    if "image_description" in st.session_state:
                        st.markdown("### üìù Description de l'image")
                        st.markdown(st.session_state.image_description)
            
            # Si une image existe d√©j√† dans la session, l'afficher
            elif "generated_image" in st.session_state:
                st.markdown("### üé® Image g√©n√©r√©e pr√©c√©demment")
                st.info("Une image a d√©j√† √©t√© g√©n√©r√©e pour cette histoire.")
                
                # Afficher l'image existante
                image = Image.open(st.session_state.generated_image)
                st.image(image, caption="Votre histoire visualis√©e", use_column_width=True)
                
                # Boutons d'action pour l'image existante
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    # T√©l√©chargement
                    st.session_state.generated_image.seek(0)
                    st.download_button(
                        label="üì• T√©l√©charger l'image",
                        data=st.session_state.generated_image.getvalue(),
                        file_name="histoire_visualisee.png",
                        mime="image/png"
                    )
                
                with col2:
                    # Bouton pour g√©n√©rer une description
                    if st.button("üîç D√©crire l'image", key="describe_existing"):
                        # Copier image_data pour √©viter les probl√®mes de position
                        image_data_copy = BytesIO()
                        st.session_state.generated_image.seek(0)
                        image_data_copy.write(st.session_state.generated_image.read())
                        image_data_copy.seek(0)
                        
                        with st.spinner("üîÑ G√©n√©ration de la description..."):
                            description = describe_image(client, image_data_copy)
                        
                        if description:
                            st.session_state.image_description = description
                            st.rerun()
                        else:
                            st.error("‚ùå Impossible de g√©n√©rer la description. V√©rifiez votre cl√© API et r√©essayez.")
                
                with col3:
                    # G√©n√©rer une nouvelle image
                    if st.button("üîÑ G√©n√©rer une nouvelle image"):
                        # Supprimer l'ancienne image de la session
                        if "generated_image" in st.session_state:
                            del st.session_state["generated_image"]
                        if "image_url" in st.session_state:
                            del st.session_state["image_url"]
                        if "image_description" in st.session_state:
                            del st.session_state["image_description"]
                        st.rerun()
                
                # Afficher la description si elle existe
                if "image_description" in st.session_state:
                    st.markdown("### üìù Description de l'image")
                    st.markdown(st.session_state.image_description)
        else:
            st.info("üëà Veuillez d'abord cr√©er une histoire dans l'onglet 'Cr√©ation d'Histoire'")
    
    with tab3:
        st.header("üñºÔ∏è Galerie de vos Cr√©ations")
        st.markdown("Visualisez vos histoires et images cr√©√©es")
        
        if "generated_image" in st.session_state:
            # Afficher la cr√©ation compl√®te
            st.markdown("### üé≠ Votre Cr√©ation Compl√®te")
            
            # Histoire originale
            if "original_story" in st.session_state:
                st.markdown("**üí≠ Id√©e originale:**")
                st.markdown(st.session_state.original_story)
            
            # Histoire am√©lior√©e
            if "improved_story" in st.session_state:
                st.markdown("**üìñ Histoire am√©lior√©e:**")
                st.markdown(st.session_state.improved_story)
            
            # Image g√©n√©r√©e
            st.markdown("**üé® Image g√©n√©r√©e:**")
            image = Image.open(st.session_state.generated_image)
            st.image(image, caption="Votre histoire visualis√©e", use_column_width=True)
            
            # Prompt utilis√© pour l'image
            if "image_prompt" in st.session_state:
                with st.expander("üé® Prompt utilis√© pour l'image"):
                    st.code(st.session_state.image_prompt)
            
            # Description de l'image si disponible
            if "image_description" in st.session_state:
                st.markdown("**üîç Description de l'image:**")
                st.markdown(st.session_state.image_description)
            
            # Actions
            st.markdown("### üéØ Actions")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                # T√©l√©chargement de l'image
                st.session_state.generated_image.seek(0)
                st.download_button(
                    label="üì• T√©l√©charger l'image",
                    data=st.session_state.generated_image.getvalue(),
                    file_name="ma_creation.png",
                    mime="image/png"
                )
            
            with col2:
                # Exporter le tout en texte
                if st.button("üìÑ Exporter tout en texte"):
                    export_text = f"""=== MA CR√âATION ===

ID√âE ORIGINALE:
{st.session_state.get('original_story', 'Non disponible')}

HISTOIRE AM√âLIOR√âE:
{st.session_state.get('improved_story', 'Non disponible')}

PROMPT POUR L'IMAGE:
{st.session_state.get('image_prompt', 'Non disponible')}

DESCRIPTION DE L'IMAGE:
{st.session_state.get('image_description', 'Non disponible')}

URL DE L'IMAGE:
{st.session_state.get('image_url', 'Non disponible')}
"""
                    st.download_button(
                        label="üìÑ T√©l√©charger le texte",
                        data=export_text,
                        file_name="ma_creation_complete.txt",
                        mime="text/plain"
                    )
            
            with col3:
                # Nouvelle cr√©ation
                if st.button("üîÑ Nouvelle cr√©ation"):
                    # Effacer la session
                    for key in ['improved_story', 'original_story', 'generated_image', 'image_url', 'image_prompt', 'image_description']:
                        if key in st.session_state:
                            del st.session_state[key]
                    st.rerun()
        
        else:
            st.info("üé® Aucune cr√©ation disponible. Cr√©ez votre premi√®re histoire dans l'onglet 'Cr√©ation d'Histoire' !")
    
    with tab4:
        st.header("‚ÑπÔ∏è √Ä propos du Projet")
        st.markdown("""
        ### üé≠ G√©n√©rateur d'Histoires Visuelles
        
        Cette application combine plusieurs fonctionnalit√©s d'OpenAI pour cr√©er une exp√©rience cr√©ative compl√®te :
        
        #### üõ†Ô∏è Fonctionnalit√©s utilis√©es :
        
        **1. üí¨ Chat GPT (Am√©lioration d'histoires)**
        - Utilise GPT-4 pour enrichir vos id√©es d'histoires
        - Ajoute des d√©tails visuels et narratifs
        - Optimise le prompt pour la g√©n√©ration d'images
        
        **2. üé® DALL-E 3 (G√©n√©ration d'images)**
        - Cr√©e des images uniques bas√©es sur vos histoires
        - Plusieurs formats et qualit√©s disponibles
        - G√©n√©ration haute r√©solution
        
        **3. üëÅÔ∏è Vision GPT-4 (Description d'images)**
        - Analyse et d√©crit les images g√©n√©r√©es
        - Fournit des descriptions d√©taill√©es et cr√©atives
        - Compl√®te le cycle cr√©atif
        
        #### üîÑ Workflow :
        1. **Saisie** : Entrez votre id√©e d'histoire
        2. **Am√©lioration** : L'IA enrichit votre histoire
        3. **Visualisation** : DALL-E cr√©e une image
        4. **Description** : L'IA d√©crit l'image g√©n√©r√©e
        5. **Sauvegarde** : Exportez votre cr√©ation compl√®te
        
        #### üí° Conseils d'utilisation :
        - Soyez cr√©atif dans vos id√©es initiales
        - N'h√©sitez pas √† modifier le prompt avant g√©n√©ration
        - Testez diff√©rents param√®tres d'image
        - Explorez les descriptions pour enrichir vos histoires
        
        #### üéØ Cas d'usage :
        - **Cr√©ateurs de contenu** : G√©n√©rer des visuels pour vos histoires
        - **√âcrivains** : Visualiser vos sc√®nes et personnages
        - **√âducateurs** : Cr√©er du mat√©riel p√©dagogique illustr√©
        - **Artistes** : Explorer de nouvelles id√©es cr√©atives
        """)
        
        st.markdown("---")
        st.markdown("### üîß Technologies utilis√©es")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **ü§ñ OpenAI API**
            - GPT-4 pour l'am√©lioration de texte
            - DALL-E 3 pour la g√©n√©ration d'images
            - GPT-4 Vision pour l'analyse d'images
            """)
        
        with col2:
            st.markdown("""
            **üé® Interface**
            - Streamlit pour l'interface utilisateur
            - PIL pour le traitement d'images
            - Requests pour les t√©l√©chargements
            """)

else:
    # Message d'information si pas de cl√© API
    st.info("üîë Veuillez entrer une cl√© API OpenAI valide pour utiliser le g√©n√©rateur d'histoires visuelles.")
    
    st.markdown("### üé≠ Pr√©sentation du Projet")
    st.markdown("""
    Ce **G√©n√©rateur d'Histoires Visuelles** combine plusieurs technologies d'OpenAI pour cr√©er une exp√©rience cr√©ative unique :
    
    #### üåü Fonctionnalit√©s principales :
    
    **üìù Am√©lioration d'histoires**
    - Entrez une id√©e simple
    - L'IA la transforme en histoire riche et d√©taill√©e
    - Optimisation automatique pour la g√©n√©ration d'images
    
    **üé® G√©n√©ration d'images**
    - Cr√©ation d'images uniques avec DALL-E 3
    - Plusieurs formats et qualit√©s
    - Bas√© sur votre histoire am√©lior√©e
    
    **üëÅÔ∏è Description d'images**
    - Analyse automatique des images g√©n√©r√©es
    - Descriptions cr√©atives et d√©taill√©es
    - Retour narratif sur votre cr√©ation
    
    **üñºÔ∏è Galerie compl√®te**
    - Visualisation de toutes vos cr√©ations
    - Export en diff√©rents formats
    - Sauvegarde de l'ensemble du processus cr√©atif
    
    #### üöÄ Pour commencer :
    1. Obtenez une cl√© API sur [platform.openai.com](https://platform.openai.com/api-keys)
    2. Entrez votre cl√© dans le champ ci-dessus
    3. Commencez √† cr√©er vos histoires visuelles !
    """)

# Sidebar avec informations
with st.sidebar:
    st.markdown("### üé® G√©n√©rateur d'Histoires")
    st.markdown("""
    **Workflow cr√©atif :**
    1. üí≠ Id√©e originale
    2. üìù Am√©lioration IA
    3. üé® G√©n√©ration d'image
    4. üëÅÔ∏è Description visuelle
    5. üñºÔ∏è Galerie compl√®te
    """)
    
    st.markdown("### üõ†Ô∏è Outils utilis√©s")
    st.markdown("""
    - **GPT-4** : Am√©lioration de texte
    - **DALL-E 3** : G√©n√©ration d'images
    - **GPT-4 Vision** : Description d'images
    - **Streamlit** : Interface utilisateur
    """)
    
    # Statut de la connexion API
    st.markdown("### üîå Statut de l'API")
    if client:
        st.success("Connect√© ‚úÖ")
    else:
        st.error("Non connect√© ‚ùå")
    
    # Informations sur la session
    if "improved_story" in st.session_state:
        st.markdown("### üìä Session actuelle")
        st.success("‚úÖ Histoire cr√©√©e")
        
        if "generated_image" in st.session_state:
            st.success("‚úÖ Image g√©n√©r√©e")
        
        if "image_description" in st.session_state:
            st.success("‚úÖ Description cr√©√©e")

# Style CSS personnalis√©
st.markdown("""
<style>
    .stTextInput > div > div > input[type="password"] {
        font-family: monospace;
    }
    
    .creation-card {
        background-color: #f0f2f6;
        padding: 20px;
        border-radius: 10px;
        border-left: 4px solid #4CAF50;
        margin: 10px 0;
    }
    
    .workflow-step {
        background-color: #e8f4f8;
        padding: 15px;
        border-radius: 8px;
        margin: 10px 0;
        border-left: 3px solid #2196F3;
    }
</style>
""", unsafe_allow_html=True)